{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentaci\u00f3n de Lenguaje de Marcas y Sistemas de Gestion de Informaci\u00f3n (LMSGI) y Entornos de Desarrollo (EDD)","text":"<p>Bienvenido a mi documentaci\u00f3n personal sobre las asignaturas Lenguaje de Marcas y Sistemas de Gestion de Informaci\u00f3n (LMSGI) y Entornos de Desarrollo (EDD). Este repositorio re\u00fane mis apuntes, ejercicios y reflexiones.</p>"},{"location":"#contenido","title":"Contenido","text":""},{"location":"#lmsgi-lenguaje-de-marcas-y-sistemas-de-gestion-de-informacion","title":"LMSGI (Lenguaje de Marcas y Sistemas de Gestion de Informaci\u00f3n)","text":"<ul> <li>Apuntes sobre XML, HTML y CSS.</li> <li>Ejercicios y ejemplos pr\u00e1cticos de estructuraci\u00f3n de documentos.</li> <li>Notas sobre validaci\u00f3n y mejores pr\u00e1cticas.</li> </ul>"},{"location":"#edd-entornos-de-desarrollo","title":"EDD (Entornos de Desarrollo)","text":"<ul> <li>Apuntes sobre configuraci\u00f3n de IDEs y herramientas de desarrollo.</li> <li>Pr\u00e1cticas de control de versiones con Git.</li> <li>Ejercicios de pruebas, depuraci\u00f3n y automatizaci\u00f3n de tareas.</li> </ul>"},{"location":"EDD/Tema1/Ejercicios/","title":"Ejercicios","text":"TEMA 1 Entornos de desarrollo"},{"location":"EDD/Tema1/Ejercicios/#ejercicio-1","title":"Ejercicio 1","text":"<p>Buscar los lenguajes m\u00e1s utilizados e indicar sus caracter\u00edsticas</p> Lenguaje Nivel de abstracci\u00f3n Prop\u00f3sito Interpretado o compilado Paradigma utilizado Python Prop\u00f3sito general Alto Interpretado Estructurada C++ Prop\u00f3sito general Alto Compilado Orientada a objetos Java Prop\u00f3sito general Alto Compilado Orientada a objetos C Prop\u00f3sito general Intermedio Compilado Estructurada y modular C# Prop\u00f3sito general Alto Compilado Orientada a objetos"},{"location":"EDD/Tema1/Ejercicios/#ejercicio-2","title":"Ejercicio 2","text":"<p>Art\u00edculo sobre c\u00f3mo platear\u00edas el desarrollo de una app (lenguajes, tecnolog\u00edas, etc.)</p> <p>Para crear una aplicaci\u00f3n para android usar\u00eda las siguientes tecnolog\u00edas:</p> <ol> <li>Java para el desarrollo de la app</li> <li>Room para la base de datos</li> <li>Jetpack para las framework</li> <li>Implantaci\u00f3n en Google Play</li> </ol>"},{"location":"EDD/Tema1/Ejercicios/#ejercicio-3","title":"Ejercicio 3","text":"<p>Ejemplos de traducci\u00f3n. Las \u00f3rdenes python3, cc, java y javac.</p> python3 Ejecuta programas o scripts escritos en Python utilizando la versi\u00f3n 3 del lenguaje cc Compila programas escritos en el lenguaje C java Toma el archivo .class generado despu\u00e9s de compilar el c\u00f3digo fuente de Java y lo ejecuta en la M\u00e1quina Virtual de Java javac Compila archivos de c\u00f3digo fuente escritos en Java"},{"location":"EDD/Tema1/Ejercicios/#ejercicio-4","title":"Ejercicio 4","text":"<p>El efecto Bola de nieve</p> <ul> <li>Problemas:<ul> <li>Falta de comunicaci\u00f3n continua</li> <li>Requisitos mal definidos o incompletos</li> </ul> </li> <li>Soluciones:<ul> <li>Enviar prototipos y demos frecuentes</li> <li>Involucrar m\u00e1s al cliente en el proceso</li> <li>Comunicaci\u00f3n continua con el cliente</li> </ul> </li> </ul>"},{"location":"EDD/Tema1/Ejercicios/#ejercicio-5","title":"Ejercicio 5","text":"<p>La web de una empresa</p> <p>Usar\u00eda el modelo en espiral porque implica un desarrollo en ciclos donde se pueden identificar riesgos y realizar una evaluaci\u00f3n constante del progreso y de la calidad del producto.</p> <ul> <li>An\u00e1lisis<ul> <li>Definir qu\u00e9 informaci\u00f3n debe estar en la web</li> </ul> </li> <li>Dise\u00f1o<ul> <li>Dise\u00f1o conceptual: definir la estructura de la p\u00e1gina web</li> <li>Dise\u00f1o t\u00e9cnico: seleccionar tecnolog\u00edas</li> </ul> </li> <li>Codificaci\u00f3n</li> <li>Pruebas<ul> <li>Pruebas de uso, rendimiento, seguridad, y compatibilidad con diferentes dispositivos</li> </ul> </li> <li>Implementaci\u00f3n</li> <li>Mantenimiento <ul> <li>Soporte t\u00e9cnico para solucionar posibles problemas</li> </ul> </li> </ul>"},{"location":"EDD/Tema1/Ejercicios/#ejercicio-6","title":"Ejercicio 6","text":"<p>Scrum: Conflicto de intereses</p> <p>Hubo un conflicto de prioridades y expectativas entre ellos</p> <ol> <li>Sobrecarga del equipo</li> <li>Expectativas del cliente</li> <li>Falta de negociaci\u00f3n</li> </ol> <p>Lo que sucedi\u00f3 es que el equipo estaba sobrecargado y se les asignaron demasiadas tareas con plazos ajustados, que afect\u00f3 a la calidad y la entrega a tiempo</p>"},{"location":"EDD/Tema3/GIT/","title":"GIT","text":"TEMA 3 Entornos de desarrollo <p>5 Sistema de control de versiones distribuido git</p>"},{"location":"EDD/Tema3/GIT/#instalacion-y-procesos-continua-entre-ejercicios","title":"Instalaci\u00f3n y procesos (continua entre ejercicios)","text":"<p>Mientras vas realizando los diferentes pasos, ve haciendo una peque\u00f1a gu\u00eda en markdown del que consideras m\u00e1s importante, relacion\u00e1ndolo con el apartado de teor\u00eda. Anota en ella los diferentes cambios que vas haciendo sobre tu directorio de trabajo.</p> <p>GIT</p> <p> Instalaci\u00f3n mediante comando </p> <p> Configuraci\u00f3n de GIT </p> <p> Creaci\u00f3n, inicializaci\u00f3n de la carpeta del proyecto y primer commit </p>"},{"location":"EDD/Tema3/GIT/#ejercicio-1","title":"Ejercicio 1","text":"<p>Prueba a modificar el fichero y observa los cambios en el estado. En qu\u00e9 estado se encontrar\u00e1 ahora el archivo? Qu\u00e9 tendremos que hacer para que los cambios se reflejen en el repositorio? Investiga sobre el par\u00e1metro -a de la orden git commit e intenta relacionarlo con este ejercicio.</p> <p>La opci\u00f3n <code>-a</code> permite hacer un commit de todos los archivos al mismo tiempo</p> <p> Cambios realizados en el archivo Fichero1.md </p>"},{"location":"EDD/Tema3/GIT/#ejercicio-2","title":"Ejercicio 2","text":"<p>Crea dos ficheros, denominados tmp1.md y tmp2.md y a\u00f1\u00e1delos dentro del repositorio, comprobando el estado en cada paso, y verificando que est\u00e1n en el repositorio.</p> <p> </p> <p> Creaci\u00f3n de ambos archivos, comprovaci\u00f3n y verificaci\u00f3n </p> <p> </p> <p> Eliminaci\u00f3n de archivos </p> <p> Cambio de nombre local </p> <p> Cambio de nombre directo desde el repositorio </p> <p> Deshacer cambios </p> <p> </p> <p> Ignorado de ficheros </p> <p> Eliminaci\u00f3n de archivos y carpetas no seguidos </p>"},{"location":"EDD/Tema3/GIT/#ejercicio-git-log-y-git-log-oneline","title":"Ejercicio git log y git log --oneline","text":"<p>Una vez hayas finalizado, copia como c\u00f3digo el resultado de la orden: <code>git log</code></p> Desplegable con todo el contenido del comando git log <pre><code>Andy-PC@Andy_PC MINGW64 /t/Proyecto (master)\n$ git log\ncommit cc06434cd4149daf9c3cae5b3fabf77098fe2f90 (HEAD -&gt; master)\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:37:16 2024 +0100\n\n    Revert \"recuperado archivo tm2.md\"\n\n    This reverts commit e4f0296bf13bdee9aa6805d3a94e2612ba8f33c9.\n\ncommit 974977d0a2380c4e0053561b121480a4d879e5d3\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:36:24 2024 +0100\n\n    Eliminado de nuevo tm1.md por equivocacion al recuperarlo\n\ncommit a95768eda74d12d23e4671990020cc47da1f8996\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:33:21 2024 +0100\n\n    Revert \"Eliminado tm1.md\"\n\n    This reverts commit 67b7d4cf79897f45034faa8ab364a13bf1f0a9db.\n\ncommit 21b57a9a827c135e61dd83982a80a932824cda0f\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:33:01 2024 +0100\n\n    A\u00f1adido archivo Java\n\ncommit 9302838f40d2a40b7529501872f9fad959c5cee0\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:13:45 2024 +0100\n\n    A\u00f1adido .gitignore\n\ncommit 4676e59d4256529f05d5a57c862735865f0ba489\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:07:50 2024 +0100\n\n    Cambio nombre tmp_mv.md a tmp_mv_2.md\n\ncommit f9c0c10fa17554f5a0b4935a473adc8daa575d7a\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:06:52 2024 +0100\n\n    Creado tmp_mv.md para segundo cambio de nombre\n\ncommit e0f2af332e7dc774b8e4f5db408dc2bc079ecb82\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:04:53 2024 +0100\n\n    Cambio nombre tmp_mv.md\n\ncommit 35452ccf40f28caec564056166457d432d01a6a3\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 17:02:26 2024 +0100\n\n    tmp_mv.md creado\n\ncommit e4f0296bf13bdee9aa6805d3a94e2612ba8f33c9\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 16:19:31 2024 +0100\n\n    Eliminado tm2.md\n\ncommit 67b7d4cf79897f45034faa8ab364a13bf1f0a9db\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 16:18:19 2024 +0100\n\n    Eliminado tm1.md\n\ncommit c2ca5e597f32abbfebf6a47044787712c8b1b9d7\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 16:14:18 2024 +0100\n\n    Fichero 1 commit proba visual\n\ncommit 276986ae780a7b57bf903a7365fa83e3d302f6b0\nAuthor: andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 15:45:51 2024 +0100\n\n    Agregados dos ficheros de prueba\n\ncommit f888254bc3b9927f6d04dc173cba74b780db0774\nAuthor: Andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 13:52:19 2024 +0100\n\n    Modificado el fichero1.md\n\ncommit 31fc770ec670bbbeb40ce89ce90529f8de8b5f01\nAuthor: Andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 13:50:24 2024 +0100\n\n    Agregado el primer commit\n\ncommit 27d4a5fe77c5174fb4b2dadec03c88ea0ff15667\nAuthor: Andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 13:49:03 2024 +0100\n\n    cambios\n\ncommit 1b712e90ed642b7794830dd2112707f975db1bf8\nAuthor: Andy &lt;andypr97vlc@gmail.com&gt;\nDate:   Mon Oct 28 13:37:32 2024 +0100\n\n    A\u00f1adiendo el primer commit\n</code></pre> <p>Y adjunta al final del documento tambi\u00e9n un pantallazo del resultado de: <code>git log --oneline</code></p> <p> </p>"},{"location":"EDD/Tema3/RSC_Subversion/","title":"RSC y subversion","text":"TEMA 1 Entornos de desarrollo"},{"location":"EDD/Tema3/RSC_Subversion/#ejercicio-1-desarrollo-colaborativo","title":"Ejercicio 1. Desarrollo colaborativo","text":"<p>Joan y Miquel son dos desarrolladores del mismo proyecto de software. A pesar de que cada cual trabaja unas funcionalidades concretas de una aplicaci\u00f3n, tienen que trabajar con el mismo c\u00f3digo fuente. Qu\u00e9 mecanismos y qu\u00e9 procedimiento crees que ser\u00eda m\u00e1s conveniente utilizar a su trabajo diaria? Describe en un fichero en formato markdown los mecanismos que utilizar\u00edas, justificando el tipo, as\u00ed como el procedimiento detallado de las operaciones que tendr\u00edan que hacer cada vez que van a trabajar con el proyecto.</p> <p>Mecanismos a Utilizar</p> <ol> <li> <p>Control de versiones con Git</p> </li> <li> <p>Repositorio Remoto:    Un servicio de repositorio remoto centralizado proporcionar\u00e1 un espacio com\u00fan donde pueden subir y descargar los cambios del c\u00f3digo.</p> </li> <li> <p>Ramas de desarrollo:    Utilizar ramas separadas para las distintas funcionalidades. Esto evitar\u00e1 interferencias mientras trabajan en diferentes partes del proyecto.</p> </li> </ol> <p>Procedimiento Diario de Trabajo</p> <ol> <li> <p>Clonar el Repositorio    Se deber\u00e1 clonar el repositorio en las m\u00e1quinas locales.</p> </li> <li> <p>Crear una Rama de Trabajo    Cada desarrollador debe crear una nueva rama para trabajar en su funcionalidad.</p> </li> <li> <p>Realizar Cambios y Commits    Deben realizar commits para guardar el progreso localmente.</p> </li> <li> <p>Sincronizar con el Repositorio Remoto    Antes de subir los cambios al repositorio remoto, deben asegurarse de tener la \u00faltima versi\u00f3n de la rama principal.</p> </li> <li> <p>Subir la Rama al Repositorio Remoto    Una vez que hayan realizado cambios, deben subir su rama al repositorio remoto.</p> </li> <li> <p>Crear un Pull Request    Crear\u00e1n Pull Requests para que el c\u00f3digo sea revisado e integrado a la rama principal.</p> </li> <li> <p>Resolver Conflictos (si es necesario)    Si hay conflictos entre la rama de trabajo y la rama principal, deben resolverse antes de fusionar el c\u00f3digo.</p> </li> <li> <p>Fusionar la Rama en la Principal    Tras la aprobaci\u00f3n del Pull Request, los cambios se integrar\u00e1n en la rama principal.</p> </li> <li> <p>Actualizar la Rama de Trabajo    Finalmente antes de continuar con una nueva tarea, deber\u00e1n actualizar la rama principal localmente y crear una nueva para evitar trabajar sobre un c\u00f3digo desactualizado.</p> </li> </ol>"},{"location":"EDD/Tema3/RSC_Subversion/#ejercicio-2-control-de-versiones-y-modelo-iterativo","title":"Ejercicio 2. Control de versiones y modelo iterativo","text":"<p>Un equipo de desarrolladores ha decidido abordar un proyecto siguiendo un modelo de desarrollo iterativo e incremental. En la planificaci\u00f3n inicial, se ha decidido que se abordar\u00e1 en cinco fases, y cada una tendr\u00e1 como resultado una versi\u00f3n del producto con la funcionalidad correspondiente a cada iteraci\u00f3n. Para el desarrollo y trabajo en equipo utilizar\u00e1n SCV Subversion. Qu\u00e9 estructura u organizaci\u00f3n crees que ser\u00eda m\u00e1s interesante para el equipo al repositorio? Revisa los ejemplos realizados sobre Subversion, y las carpetas que este SCV sugiere que se hagan para guardar, y redacta tu propuesta de estructura/organizaci\u00f3n en un documento en formato Markdown.</p> <p>Organizaci\u00f3n General del Repositorio</p> <ol> <li>Trunk    La carpeta trunk tendr\u00e1 el desarrollo principal del proyecto. Este ser\u00e1 el espacio donde se gestionar\u00e1 el c\u00f3digo de la versi\u00f3n actual. Cada iteraci\u00f3n se integrar\u00e1 aqu\u00ed una vez que haya sido probada y validada. Estructura: <pre><code>/trunk\n       /src         C\u00f3digo fuente principal\n       /docs        Documentaci\u00f3n t\u00e9cnica y funcional\n       /tests       Pruebas\n       /resources   Recursos</code></pre></li> <li>Branches    La carpeta branches se usar\u00e1 para crear ramas de desarrollo separadas para cada iteraci\u00f3n. Esto permitir\u00e1 que el equipo trabaje en nuevas funcionalidades sin afectar el c\u00f3digo estable en trunk. Para cada fase del proyecto se crear\u00e1 una rama espec\u00edfica: <pre><code>/branches\n       /fase-1      Rama para la primera iteraci\u00f3n\n       /fase-2      Rama para la segunda iteraci\u00f3n\n       /fase-3      Etc...\n       /fase-4\n       /fase-5</code></pre> Cada rama tendr\u00e1 la misma estructura que trunk para mantener consistencia: <pre><code>/branches/fase-1\n       /src         C\u00f3digo fuente\n       /docs        Documentaci\u00f3n t\u00e9cnica y funcional\n       /tests       Pruebas\n       /resources   Recursos</code></pre></li> <li>Tags    La carpeta tags se utilizar\u00e1 para almacenar versiones espec\u00edficas del producto, como las versiones finales de cada iteraci\u00f3n que ya han sido completamente probadas y aceptadas. <pre><code>/tags\n       /v1.0        Tag para la versi\u00f3n 1.0 (final de la fase 1)\n       /v2.0        Tag para la versi\u00f3n 2.0 (final de la fase 2)\n       /v3.0        Tag para la versi\u00f3n 3.0 (final de la fase 3) Etc...\n       /v4.0\n       /v5.0</code></pre></li> </ol>"},{"location":"EDD/Tema3/RSC_Subversion/#ejercicio-3","title":"Ejercicio 3.","text":"<p>A modo de s\u00edntesis de los dos tipos de SCV vistos, crea un documento en formato Markdown indicando las diferencias entre ellos.</p> <p>Diferencias entre RCS y Subversion</p> Caracter\u00edstica RCS Subversion (SVN) Tipo de control Basado en archivos locales individuales Centralizado en un repositorio Alcance Solo controla versiones de archivos puntuales Controla proyectos completos Colaboraci\u00f3n No soporta m\u00faltiples usuarios simult\u00e1neos Soporta trabajo en equipo Sistema de revisiones Cada archivo tiene su propio historial de versiones Repositorio central con revisiones globales Manejo de ramas Limitado y manual Robusto y automatizado Red No requiere red, trabaja localmente Requiere conexi\u00f3n a un servidor de repositorio Almacenamiento Se guarda una copia de cada versi\u00f3n del archivo Guarda diferencias entre versiones <p>Hecho esto, c\u00e9ntrate en rcs y subversion y comenta brevemente y con tus palabras que hacen las siguientes \u00f3rdenes:</p> <ul> <li>Para rcs:<ul> <li><code>co</code>: Extrae un archivo para trabajar localmente.</li> <li><code>ci</code>: Guarda los cambios de un archivo.</li> </ul> </li> <li>Para svn:<ul> <li><code>svn co</code>: Para hacer un checkout.</li> <li><code>svn ci</code>: Para hacer un commit sobre el repositorio.</li> <li><code>svn st</code>: Para comprobar el estado.</li> <li><code>svn add</code>: Para a\u00f1adir un recurso al control de versiones.</li> <li><code>svn up</code>: Para actualizar nuestra copia de trabajo local desde el repositorio.</li> </ul> </li> </ul> <p>Si te fijas, ambos sistemas tienen las \u00f3rdenes co o ci. Hacen exactamente el mismo en un sistema que en otro? Qu\u00e9 diferencias tienen?</p> <p>Diferencias entre co y ci en RCS y Subversion - <code>co</code> en RCS: Extrae un archivo para trabajar localmente, bloqueando su edici\u00f3n hasta que se haga un ci. - <code>svn co</code> en Subversion: Extrae una copia completa del repositorio, permite que m\u00faltiples usuarios trabajen en paralelo y no bloquea los archivos. - <code>ci</code> en RCS: Guarda los cambios de un archivo espec\u00edfico, desbloque\u00e1ndolo. - <code>svn ci</code> en Subversion: Sube todos los cambios realizados a un repositorio, permitiendo que otros usuarios los integren en sus copias locales.</p>"},{"location":"EDD/Tema3/gitclonar/","title":"Clonar GIT","text":"TEMA 3 Entornos de desarrollo <p>Clona el repositorio projecteCompartit en tu ordenador, pero gu\u00e1rdalo con el nombre projecteCompartit2. Crea en \u00e9l un nuevo fichero fitxer2.md con el contenido \u201cFichero creado desde otro lugar\u201d, a\u00f1\u00e1delo al control de versiones y env\u00edalo al servidor (esto podr\u00eda hacerse tambi\u00e9n desde otro ordenador)</p> <p> Clonado, creacion de ficjero y push hacia la rama main </p>"},{"location":"EDD/Tema4/ant/","title":"ANT","text":"TEMA 4 Entornos de desarrollo <p>Crea una clase llamada Calculadora en un paquete formado por tu nombre (por ejemplo c\u00f3mo.jose.edd) con los siguientes m\u00e9todos (funciones):</p> <p><code>public static int suma(int a, int b): Que suma a y b y devuelve el resultado,</code> <code>public static int resto(int a, int b): Que resto a y b y devuelve el resultado,</code> <code>public static int multiplica(int a, int b): Que multiplica a y b y devuelve el resultado,</code> <code>public static int divide(int a, int b): Que divide a entre b y devuelve el resultado. Si b es 0, muestra el error y vuelve un 0.</code></p> <p>Y otra clase que a la funci\u00f3n principal haga uso de estas funciones, y muestro los resultados por pantalla.</p> <p>Crea el directorio build, y haz uso de este como classpath.</p> <p>Indica a un fichero Markdown el proceso que has seguido, incluyendo el c\u00f3digo fuente, las \u00f3rdenes para compilar y para ejecutar, y la estructura de carpetas resultante. Haz una breve explicaci\u00f3n de cada cosa.</p> <p> Clonado, creacion de fichero y push hacia la rama main </p> <p>C\u00f3digo de la funci\u00f3n Principal</p> <pre><code>package ejerJava.com.andy.edd;\n\nimport java.util.*;\n\npublic class Principal {\n\n    static Scanner teclado = new Scanner(System.in);\n\n    public static void main(String[] args) {\n\n        System.out.println(\"Calculadora:\");\n        System.out.println(\"Qu\u00e9 te gustaria hacer?\");\n        System.out.println(\"[1] Sumar\\n[2] Restar\\n[3] Multiplicar\\n[4] Dividir\");\n\n        String eleccion = teclado.nextLine();\n\n        switch (eleccion) {\n            case \"1\":\n                Calculadora.sumar();\n                break;\n            case \"2\":\n                Calculadora.restar();\n                break;\n            case \"3\":\n                Calculadora.multiplicar();\n                break;\n            case \"4\":\n                Calculadora.dividir();\n                break;\n        }\n\n    }\n}\n</code></pre> <p>C\u00f3digo de la funci\u00f3n Calculadora</p> <pre><code>package ejerJava.com.andy.edd;\n\nimport java.util.*;\n\npublic class Calculadora {\n\n    static Scanner teclado = new Scanner(System.in);\n\n    public static int[] pedirNumeros() {\n\n        System.out.println(\"Dame los 2 numeros\");\n\n        int a = teclado.nextInt();\n        int b = teclado.nextInt();\n\n        return new int[] { a, b };\n    }\n\n    public static void sumar() {\n        int[] numeros = pedirNumeros();\n        int a = numeros[0];\n        int b = numeros[1];\n        int resultado = a + b;\n        System.out.println(a + \" + \" + b + \" = \" + resultado);\n    }\n\n    public static void restar() {\n        int[] numeros = pedirNumeros();\n        int a = numeros[0];\n        int b = numeros[1];\n        int resultado = a - b;\n        System.out.println(a + \" - \" + b + \" = \" + resultado);\n    }\n\n    public static void multiplicar() {\n        int[] numeros = pedirNumeros();\n        int a = numeros[0];\n        int b = numeros[1];\n        int resultado = a * b;\n        System.out.println(a + \" x \" + b + \" = \" + resultado);\n    }\n\n    public static void dividir() {\n\n        int[] numeros = pedirNumeros();\n        int a = numeros[0];\n        int b = numeros[1];\n\n        if (a == 0 || b == 0) {\n            System.out.println(\"Error, no se puede dividir entre 0\");\n        } else {\n            int resultado = a / b;\n            System.out.println(a + \" / \" + b + \" = \" + resultado);\n        }\n    }\n}\n</code></pre>"},{"location":"EDD/Tema4/maven/","title":"MAVEN","text":"TEMA 4 Entornos de desarrollo <p>Sigue los pasos anteriores y configura un proyecto Maven desde la l\u00ednea de \u00f3rdenes. Modifica el c\u00f3digo fuente con el de tu calculadora. El nombre del paquete ser\u00e1 tu nombre y apellidos, en el formato como.cognom2.cognom1.nombre. Documenta el proceso y crea una entrada a tu devlog.</p> <p> Creaci\u00f3n del proyecto a partir del arquetipo y estructura de la carpeta </p> <p> Compilacion, creaci\u00f3n del target y estructura de la carpeta </p> <p> Ejecuci\u00f3n desde el target </p> <p> Eliminaci\u00f3n del target </p> <p> Empaquetado </p> <p> Eliminaci\u00f3n del paquete </p> <p> Ejecuci\u00f3n desde el paquete </p> <p>Haz lo mismo, pero ahora generando el proyecto Maven desde VSCode. Documenta el proceso y a\u00f1\u00e1delo en una entrada al devlog.</p> <p> Creaci\u00f3n del proyecto maven desde la pesta\u00f1a </p> <p> Elecci\u00f3n del aquetipo </p> <p> Eleccion de la ruta del proyecto </p> <p> Ejecuci\u00f3n desde la terminal de VSCode </p> <p> Pesta\u00f1a con todos los tipos de acciones que se pueden realizar </p> <p>Explora las opciones de Netbeans para crear un proyecto Maven y crea un proyecto con las mismas caracter\u00edsticas, documentando el proceso.</p> <p> Creaci\u00f3n del proyecto </p> <p> Configuraci\u00f3n del proyecto </p> <p> Acciones a realizar desde la barra de herramientas </p>"},{"location":"LMI/Tema1/Apuntes/","title":"Apuntes","text":"TEMA 1 Lenguaje de marcas"},{"location":"LMI/Tema1/Apuntes/#lenguajes-informaticos","title":"Lenguajes inform\u00e1ticos","text":"<p>Todos los lenguajes de programaci\u00f3n son lenguajes inform\u00e1ticos pero todos los lenguajes inform\u00e1ticos no son lenguajes de programaci\u00f3n. Un lenguaje inform\u00e1tico es aquel lenguaje que utilizamos para comunicarnos con el ordenador.</p> <ul> <li>Legunaje de marcas de presnetaci\u00f3n<ul> <li>Los ficheros de tipo odt,docx...</li> <li>Los HTML al mostrarse por navegador</li> </ul> </li> <li>Lenguaje de marcas de procedimiento<ul> <li>LateX</li> <li>PostScript</li> </ul> </li> <li>Lenguajes de marcas descriptivos<ul> <li>SGML</li> <li>XML</li> <li>SVG</li> </ul> </li> <li>Lenguajes de marcas ligeros<ul> <li>Markdown</li> </ul> </li> </ul>"},{"location":"LMI/Tema1/Ejercicios/","title":"Ejercicios","text":"TEMA 1 Lenguaje de marcas"},{"location":"LMI/Tema1/Ejercicios/#ejercicio-1","title":"Ejercicio 1","text":"<p>Identificar caracter\u00edsticas (elementos, etiquetas, propiedades) de los lenguajes de marcas en diferentes documentos (svg, HTML, xml...)</p> <p>Documentos en texto plano Al usar texto plano sin ningun tipo de enriquecimiento permite el uso de cualquier software para visualizarlo</p> <p>Marcas insertadas en el contenido En lo documento HTML, se identifica varias etiquetas como <code>&lt;head&gt;</code> o <code>&lt;body&gt;</code></p> <p>Componentes sencillos e intuitivos Todos los componentes de los documentos son legibles y entendibles, lo que permite la creacion de lenguajes especificos dependiendo del documento</p> <p>Versatilidad y \u00e1mbito de utilizaci\u00f3n extenso En todos los documentos ofrecidos de usan leguajes de marcas</p> <p>Etiquetas identificativas del tipo de contenido Las etiquetas de <code>&lt;head&gt;</code> se usan para el encabezado del documento y el de <code>&lt;body&gt;</code> para el del cuerpo del documento</p>"},{"location":"LMI/Tema1/Ejercicios/#ejercicio-2","title":"Ejercicio 2","text":"<p>Identificaci\u00f3n de los espacios de nombres en documentos (AndroidManifest.xml). Este art\u00edculo se podr\u00eda combinar con el anterior.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\"&gt;\n\n    &lt;!-- Permisos necessaris per a l'aplicaci\u00f3 --&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n\n    &lt;!-- Configuraci\u00f3 de l'aplicaci\u00f3 --&gt;\n    &lt;application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"&gt;\n\n        &lt;!-- Activitat principal --&gt;\n        &lt;activity android:name=\".MainActivity\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <p>Se identifica un espacio de nombre en la segunda l\u00ednea del c\u00f3digo</p> <pre><code>&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapp\"&gt;\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/","title":"Ejercicios","text":"TEMA 3 Lenguaje de marcas"},{"location":"LMI/Tema3/Ejercicios/#elementos-del-lenguaje","title":"Elementos del lenguaje","text":""},{"location":"LMI/Tema3/Ejercicios/#declaracion-de-variables-y-operadores","title":"Declaraci\u00f3n de variables y operadores","text":"<p>Declara tres variables con tus colores preferidos y mu\u00e9stralas por consola. A continuaci\u00f3n, utiliza operadores para combinarlas en una nueva variable y muestra el resultado.</p> <pre><code>color1 = \"azul\";\ncolor2 = \"verde\";\ncolor3 = \"negro\";\n\nconsole.log(color1);\nconsole.log(color2);\nconsole.log(color3);\n\nallcolor = color1 + color2 + color3;\n\nconsole.log(allcolor);\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#uso-de-typeof","title":"Uso de typeof","text":"<p>Crea variables de diferentes tipos: un n\u00famero, una cadena de texto y un valor l\u00f3gico. Utiliza typeof para mostrar el tipo de cada variable en consola.</p> <pre><code>num = 2;\ntext = \"Hola\";\nlogic = true;\n\nconsole.log(typeof num);\nconsole.log(typeof text);\nconsole.log(typeof logic);\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#conversion-de-tipo-automatica","title":"Conversi\u00f3n de tipo autom\u00e1tica","text":"<p>Declara dos variables, una como n\u00famero y otra como cadena de texto. Asigna una expresi\u00f3n que involucro las dos variables a una tercera variable y comprueba el resultado y el tipo. Explica por qu\u00e9 se obtiene este resultado.</p> <pre><code>num = 2;\ntext = \"Hola\";\n\nresul = num + text;\n\nconsole.log(resul);\nconsole.log(typeof resul);\n</code></pre> <p>Se obtiene este resultado ya que JavaScript es un lenguaje de tipificado d\u00e9bil, por lo que el tipo \"string\" tiene prioridad sobre \"number\"</p>"},{"location":"LMI/Tema3/Ejercicios/#vectores-y-acceso-a-elementos","title":"Vectores y acceso a elementos","text":"<p>Declara un vector con los d\u00edas de la semana y muestra en consola el segundo y el quinto elemento. Modifica el \u00faltimo elemento del vector para indicar \u201cD\u00eda desconocido\u201d.</p> <pre><code>semana = [\n  \"Lunes\",\n  \"Martes\",\n  \"Miercoles\",\n  \"Jueves\",\n  \"Viernes\",\n  \"Sabado\",\n  \"Domingo\",\n];\n\nconsole.log(semana[1] + \" \" + semana[4]);\n\nsemana[6] = \"D\u00eda desconocido\"\n\nconsole.log(semana)\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#json-basico","title":"JSON b\u00e1sico","text":"<p>Define un objeto JSON con informaci\u00f3n b\u00e1sica sobre un libro (t\u00edtulo, autor y a\u00f1o). Muestra el t\u00edtulo del libro utilizando el objeto JSON y despu\u00e9s a\u00f1ade una nueva propiedad editorial.</p> <pre><code>let libro = {\n  titulo: \"El Quijote\",\n  autor: \"Miguel de Cervantes\",\n  a\u00f1o: 1997,\n};\n\nconsole.log(libro.titulo);\n\nlibro.editorial = \"Juan de la cuesta\";\n\nconsole.log(libro)\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#programacion-estructurada","title":"Programaci\u00f3n estructurada","text":""},{"location":"LMI/Tema3/Ejercicios/#condicionales-simples-con-ifelse","title":"Condicionales simples con if/else","text":"<p>Escribe una funci\u00f3n verificaHora(hora) que tome como par\u00e1metro un n\u00famero entre 0 y 23. Si la hora est\u00e1 entre 6 y 12, muestra \"Buenos d\u00edas\"; si es entre 13 y 20, \"Buenas tardes\"; y en cualquier otro caso, \"Buenas noches\".</p> <pre><code>function verificaHora(hora) {\n  if (hora &gt;= 6 &amp;&amp; hora &lt;= 12) {\n    console.log(\"Buenos d\u00edas\");\n  } else if (hora &gt;= 13 &amp;&amp; hora &lt;= 20) {\n    console.log(\"Bueneas tardes\");\n  } else {\n    console.log(\"Buenas noches\");\n  }\n}\n\nverificaHora(14)\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#condicional-switch","title":"Condicional switch","text":"<p>Crea una funci\u00f3n determinaDia(numDia) que muestro el nombre del d\u00eda en valenciano (de \u201cLunes\u201d a \u201cDomingo\u201d) a partir de un n\u00famero de 1 a 7 utilizando un switch.</p> <pre><code>function determinaDia(numDia) {\n  switch (numDia) {\n    case 1:\n      console.log(\"Lunes\");\n      break;\n    case 2:\n      console.log(\"Martes\");\n      break;\n    case 3:\n      console.log(\"Mi\u00e9rcoles\");\n      break;\n    case 4:\n      console.log(\"Jueves\");\n      break;\n    case 5:\n      console.log(\"Viernes\");\n      break;\n    case 6:\n      console.log(\"Sabado\");\n      break;\n    case 7:\n      console.log(\"Domingo\");\n      break;\n  }\n}\n\ndeterminaDia(5)\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#bucle-for","title":"Bucle for","text":"<p>Escribe un bucle for que muestro los n\u00fameros del 1 al 10. Despu\u00e9s, escribe otro for que muestro solo los n\u00fameros pares hasta el 20.</p> <pre><code>for (i = 1; i &lt;= 10; i++) {\n  console.log(i);\n}\n\nfor (i = 2; i &lt;= 20; i += 2) {\n  console.log(i);\n}\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#bucle-forof-y-vectores","title":"Bucle for...of y vectores","text":"<p>Declara un vector de tres ciudades valencianas y rec\u00f3rrelo con un for...of para mostrar cada ciudad en consola.</p> <pre><code>ciudades = [\"Valencia\", \"Alicante\", \"Castell\u00f3n\"];\nfor (ciudad of ciudades) {\n  console.log(ciudad);\n}\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#while-y-dowhile","title":"while y do...while","text":"<p>Escribe un bucle while que empiezo en 10 y vaya restante 1 hasta llegar a 0, mostrando cada valor en consola. A continuaci\u00f3n, hiciera el mismo con un do...while.</p> <pre><code>numWhile = 10;\nwhile (numWhile &gt;= 0) {\n  console.log(numWhile);\n  numWhile--;\n}\n\nnumDoWhile = 10;\ndo {\n  console.log(numDoWhile);\n  numDoWhile--;\n} while (numDoWhile &gt;= 0);\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#funciones","title":"Funciones","text":""},{"location":"LMI/Tema3/Ejercicios/#funcion-que-devuelve-un-valor","title":"Funci\u00f3n que devuelve un valor","text":"<p>Crea una funci\u00f3n doble(num) que devuelvo el doble del n\u00famero proporcionado. Gr\u00edtala con diferentes valores y muestra los resultados en consola.</p> <pre><code>function doble(num) {\n  return num * 2;\n}\nconsole.log(doble(16));\nconsole.log(doble(52));\n</code></pre>"},{"location":"LMI/Tema3/Ejercicios/#funcion-con-parametros-por-defecto","title":"Funci\u00f3n con par\u00e1metros por defecto","text":"<p>Escribe una funci\u00f3n saludo(nombre = \"amigo\") que muestro \"Hola, [nombre]!\". Si no se pasa ning\u00fan nombre, tiene que mostrar \"Hola, amigo!\".</p> <pre><code>function saludo(nom = \"amigo\") {\n  console.log(\"Hola, \" + nom + \"!\");\n}\nsaludo();\nsaludo(\"Andy\");\n</code></pre>"}]}